Control Statements

1.	Conditional Control Statements
a.	If
b.	Match

2.	Looping control Statements
a.	While
b.	For
c.	Nested looping

3.	Branching Statements
a.	Break
b.	Continue
c.	Pass
d.	Return


Control statements are used to control the flow of execution of program.

Control statements are three types

1.	Conditional control statements
2.	Looping control statements
3.	Branching statements

Conditional Control Statements
Python support two conditional control statements
1.	if
2.	match (python 3.10)

Conditional control statements are used to execute block of statements based on condition or selection.

If statement
if is keyword which represent conditional statement.

Types of if syntax
1.	simple if
2.	if..else
3.	if..elif..else (if..else ladder)
4.	nested if

simple if

if without else is called simple if.

Syntax:

If <condition>:
    Statement-1
    Statement-2
Statement-3

If condition is True, PVM executes Statement-1,Statement-2 and Statement-3
If condition is False, PVM executes statement-3	 



In python block must have one statement.s


Example:
if 10>5:
    print("Python")
print("Hello")

if 5>10:
    print("Java")
print("Bye")

if 2>10:
    print(".Net")
    print("Good")

Output:
Python
Hello
Bye

Example:
if 10>5:
    pass

print("a")
print("b")

Output:
a
b

pass keyword
The pass statement is used as a placeholder for future code. When the pass statement is executed, nothing happens, but you avoid getting an error when empty code is not allowed. Empty code is not allowed in loops, function definitions, class definitions, or in if statements.






Example:
if 10>5:
    pass
    print("Hello")

Output:
Hello

If..else

This syntax is having two blocks
1.	if block
2.	else block

Syntax:

If <condition>:
   Statement-1
   Statement-2
else:
   Statement-3
   Statement-4

Statement-5

If condition is True, PVM executes Statement-1,Statement-2 and Statement-5
If condition is False, PVM executes Statement-3, Statement4 and Statement-5
	 


Example:

# Write a program to verify input number divisible with 7 or not

num=int(input("Enter any number "))
if num%7==0:
    print(f'{num} is divisible with 7')
else:
    print(f'{num} is not divisible with 7')

Output:
Enter any number 14
14 is divisible with 7

Enter any number 12
12 is not divisible with 7

Example:

# Write a program to display "Hello" if input number is multiples of 5 else display "Bye"

num=int(input("Enter any Number "))
if num%5==0:
    print("Hello")
else:
    print("Bye")



Output:
Enter any Number 20
Hello

Enter any Number 22
Bye

if..elif..else (if..else ladder)

This syntax allows checking more than one condition. 
Syntax:

If condition1:
   Statement-1
elif condition2:
   Statement-2
elif condition3:
   Statement-3
…
else:
   Statement-n


If condition1 is True PVM execute Statement-1
If condition1 is False and Condition2 is True, PVM executes statement-2
If condition1,condition2 is False and condition3 is True, PVM executes Statement-3
If all conditions are False, PVM executes Statement-n	 







Example:

# Write a program to find input character is alphabet,digit or sepcial character

ch=input("Enter any character ")
if ch>='A' and ch<='Z' or ch>='a' and ch<='z':
    print("alphabet")
elif ch>='0' and ch<='9':
    print("digit")
else:
    print("special character")
    
Output:
Enter any character a
alphabet

Enter any character 5
digit

Enter any character $
special character









n=int(input())
if n%2!=0:
    print("Weird")
elif n>=2 and n<=5:
    print("Not Weird")
elif n>=6 and n<=20:
    print("Weird")
elif n>20:
    print("Not Weird")

 

units=int(input("Enter units"))
if units<=100:
    amt=0
elif units>100 and units<=200:
    amt=(units-100)*5
else:
    amt=0+500+(units-200)*10
print(f'Amount {amt}')




 


p=int(input("Enter Percentage"))
if p>90:
    print("A")
elif p>80 and p<=90:
     print("B")
elif p>=60 and p<=80:
    print("C")
else:
    print("D")









    
 

cost=int(input("Enter Bike Price :"))
if cost>100000:
    tax=cost*15/100
elif cost>50000 and cost<=100000:
    tax=cost*10/100
else:
    tax=cost*5/100

print(f'Bike Price {cost}')
print(f'Road Tax {tax:.2f}')



 





salary=int(input("Enter Salary "))
service=int(input("Enter Service "))
if service>10:
    bonus=salary*10/100
elif service>=6 and service<=10:
    bonus=salary*8/100
else:
    bonus=salary*5/100

print(f'Salary {salary}')
print(f'Bonus {bonus}')

Output:
Enter Salary 50000
Enter Service 12
Salary 50000
Bonus 5000.0

Enter Salary 30000
Enter Service 7
Salary 30000
Bonus 2400.0










Example:
# Write a program to convert input alphabet into uppercase to lower case,
# lowercase to uppercase

ch=input("Enter any character ")
if ch>='a' and ch<='z':
    ch=chr(ord(ch)-32)
    print(ch)
elif ch>='A' and ch<='Z':
    ch=chr(ord(ch)+32)
    print(ch)
else:
    print("input character must be alphabet")

Output:
Enter any character $
input character must be alphabet

Enter any character 7
input character must be alphabet

Enter any character a
A

Enter any character A
A





Nested if

If within if is called nested if.
Syntax:

If condition1:
   If condition2:
       Statement-1
   else:
       Statement-2
elif condition3:
   if condition4:
        Statement-3
   Else:
       Statement-4
else:
Statement-5
 

Example:
# Login Application

user=input("UserName ")
if user=="nit":
    pwd=input("Password ")
    if pwd=="nit123":
        print("Welcome")
    else:
        print("invalid password")
else:
    print("invalid username")

Output:
UserName abc
invalid username

UserName nit
Password nit123
Welcome

Example:
# Write program to login with OTP

import random
user=input("UserName ")
otp=random.randint(1000,9999)
print(f'{user} please Login with OTP {otp}')
otp1=int(input("OTP :"))
if otp1==otp:
    print(f'{user} welcome')
else:
    print("invalid OTP")

Output:
UserName nk
nk please Login with OTP 2602
OTP :2602
nk welcome

UserName suresh
suresh please Login with OTP 9425
OTP :9424
invalid OTP

match statement


match is selection statement.
match statement execute block of statements based selection of value.
match is softkeyword in python.
match statement is introduced in python 3.10 version

Syntax:

match(expression/value):
    case <pattern>:
       statement-1
    case <pattern>:
       statement-2
    case <pattern>:
       statement-3
    case _:
       statement-x


PVM read value and compare with all the cases, if equals to any case, PVM execute that block and terminates.
If value is not equal to any case, PVM executes default case which is defined _








Example:

# Write a program to input digit [0-9] and print in word
# input : 4
# output :Four

digit=int(input("Enter any Digit (0-9): "))
match(digit):
    case 0:
        print("Zero")
    case 1:
        print("One")
    case 2:
        print("Two")
    case 3:
        print("Three")
    case 4:
        print("Four")
    case 5:
        print("Five")
    case 6:
        print("Six")
    case 7:
        print("Seven")
    case 8:
        print("Eight")
    case 9:
        print("Nine")
    case _:
        print("Invalid Digit")

Output:
Enter any Digit (0-9): 3
Three

Enter any Digit (0-9): 9
Nine

Enter any Digit (0-9): 10
Invalid Digit

Example:
print("****Menu****")
print("1.Area of Circle")
print("2.Area of Triangle")
print("3.Area of Rectangle")
print("4.Exit")
opt=int(input("Enter Your Option [1-4] "))
match(opt):
    case 1:
        r=float(input("Enter R Value "))
        area=3.147*r*r
        print(f'Area of Circle is {area:.2f}')
    case 2:
        base=float(input("Enter Base Value "))
        height=float(input("Enter Height Value "))
        area=0.5*base*height
        print(f'Area of Triangle {area:.2f}')
    case 3:
        l=float(input("Enter L Value "))
        b=float(input("Enter B Value "))
        area=l*b
        print(f'Area of Rectangle {area:.2f}')


    case 4:
        print("Thank You...")
    case _:
        print("Invalid Option Try again...")

Output:
****Menu****
1.Area of Circle
2.Area of Triangle
3.Area of Rectangle
4.Exit
Enter Your Option [1-4] 2
Enter Base Value 1.2
Enter Height Value 1.5
Area of Triangle 0.90

****Menu****
1.Area of Circle
2.Area of Triangle
3.Area of Rectangle
4.Exit
Enter Your Option [1-4] 1
Enter R Value 1.5
Area of Circle is 7.08







Example:
# Write a program to find input character is vowel or not

ch=input("Enter any character ")
match(ch):
    case  'a':
        print("vowel")
    case 'e':
        print("vowel")
    case 'i':
        print("vowel")
    case 'o':
        print("vowel")
    case 'u':
        print("vowel")
    case _:
        print("not vowel")
        
Output:
Enter any character e
vowel

Enter any character x
not vowel








Example:
>>> list1=[10,20,30,40,50]
>>> match(list1):
...     case [10,20,30,40,50]:
...         print("Hello")







Looping Control Statements
Looping control statements are used to repeat one or more than one statement number of times or until given condition.

Python support 2 Looping control statements
1.	while 
2.	for 

while loop

“while” keyword represents while loop
While loop execute given block of statements until given condition is True.

Syntax:

while <condition>:
     statement-1
     statement-2

PVM repeat statement-1,statement-2 until given condition is True.	 


While loop required 3 statements
1.	initialization statement
2.	condition
3.	update statement

Initialization statement defines initial value of condition.
Condition is a Boolean expression which defines how many times while loop has to execute.
Update statement, which updates condition.


 

Example:
# Write a program to input 5 numbers and print sum

i=1
s=0
while i<=5:
    value=int(input("Enter Value "))  
    s=s+value
    i=i+1

print(f'Sum is {s}')

Output:
Enter Value 10
Enter Value 40
Enter Value 20
Enter Value 40
Enter Value 50
Sum is 160

Example:
i=0
while i<=5:
    print("Hello")
    i=i+1

j=1
while j<=5:
    print("Bye")
    j=j+2

k=1
while k>=5:
    print("java")
    k=k+1

p=5
while p>=1:
    print("Python")
    p=p-1

Output:
Hello
Hello
Hello
Hello
Hello
Hello
Bye
Bye
Bye
Python
Python
Python
Python
Python













Question to Implement

1.	Write a program to find input year is leap or not
2.	Write a program to find input number last digit is even or odd
Example:
# Write a program to find length of number or count digits of input number

num=int(input("Enter any number "))
c=0
if num==0:
    c=1
else:
    while num>0:
        num=num//10
        c=c+1


print(f'Count of digits {c}')

Output:
Enter any number 0
Count of digits 1

Enter any number 168
Count of digits 3







Example:

# Write a program to find sum of digits of input number


num=int(input("Enter any number ")) 
s=0

while num>0:
    r=num%10
    s=s+r
    num=num//10

print(f'Sum of digits {s}')


Output:
Enter any number 123
Sum of digits 6

Enter any number 54
Sum of digits 9

Enter any number 0
Sum of digits 0







Example:

# Write a program to count how many even and odd digits exists within input number

num=int(input("Enter any number ")) # 123
ecount=0
ocount=0

while num>0:
    r=num%10
    if r%2==0:
        ecount=ecount+1
    else:
        ocount=ocount+1
    num=num//10

print(f'Even count digits {ecount}')
print(f'Odd count digits {ocount}')

Output:
Enter any number 4893
Even count digits 2
Odd count digits 2

Enter any number 123
Even count digits 1
Odd count digits 2





Example:
# Write a program to find input number is armstrong or not (3digit number)

num=int(input("Enter any number "))
num1=num
s=0
while num>0:
    r=num%10
    s=s+(r**3)
    num=num//10

if  s==num1:
    print(f'{num1} armstrong')
else:
    print(f'{num1} is not armstrong')

Output
Enter any number 153
153 armstrong

Enter any number 125
125 is not armstrong

Enter any number 370
370 armstrong





Example:
# Write a program to find an input number is perfect number or not

num=int(input("enter any number "))

s=0
i=1
while i<num:
    r=num%i
    if r==0:
        s=s+i
    i=i+1

if s==num:
    print(f'{num} is perfect number ')
else:
    print(f'{num} is not perfect number')

Output:
enter any number 6
6 is perfect number 

enter any number 5
5 is not perfect number








Example:
# Write a program to find input number is palindrome or not

num=int(input("Enter any number "))
num1=num
rev=0

while num>0:
    r=num%10
    rev=(rev*10)+r
    num=num//10

print(num1)
print(rev)
if rev==num1:
    print(f'{num1} is palindrome')
else:
    print(f'{num1} is not palindrome')

Output:
Enter any number 123
123
321
123 is not palindrome








HOME WORK

Write a program to print number in words

123

ONE TWO THREE

489

Four Eight Nine


