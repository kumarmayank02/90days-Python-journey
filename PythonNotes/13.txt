Binary Integer
An integer value with base 2 is called binary integer.
Binary integer is created using two digits 0 and 1
Binary integer is prefix with 0b or 0B

Applications of binary integer
1.	Internal data representation
2.	Machine language
3.	Image Processing
4.	Audio or video processing

>>> n1=0b10
>>> n1
2
>>> n2=0b1010
>>> n2
10
>>> n3=0b1012
SyntaxError: invalid digit '2' in binary literal

 
>>> rollno=125
>>> rollno
125
>>> accountNo=123456999
>>> accountNo
123456999
>>> color=0xff0000
>>> color
16711680
>>> color=0xff
>>> color
255

All scalar data types are immutable.
After creating object, value cannot modify or after creating object changes cannot be done.

 

How to find id or address of object?
Every object in memory is identified with unique number called id or address. This id or address is generated by PVM.
Address of object is find using id() function.

Example:
>>> a=60
>>> a
60
>>> id(a)
140716079894808
>>> b=90
>>> id(b)
140716079895768
>>> a=80
>>> a
80
>>> id(a)
140716079895448

Immutable objects are sharable.

 
Example:
>>> x=10
>>> y=10
>>> z=10
>>> x
10
>>> y
10
>>> z
10
>>> id(x)
140716079893208
>>> id(y)
140716079893208
>>> id(z)
140716079893208
>>> p=5+5
>>> p
10
>>> id(p)
140716079893208

 

Base conversion functions
Python provides 3 base conversion functions
1.	Oct() 🡪 This return octal representation of integer value
2.	Hex() 🡪 This return hexadecimal representation of integer value
3.	Bin() 🡪 This return binary representation of integer value

Example:
>>> a=12
>>> a
12
>>> bin(a)
'0b1100'
>>> hex(a)
'0xc'
>>> oct(a)
'0o14'
>>> b=0xc
>>> b
12
>>> bin(b)
'0b1100'
>>> oct(b)
'0o14'
>>> bin(4000)
'0b111110100000'
c=0o12
>>> c
10
>>> oct(c)
'0o12'
>>> hex(c)
'0xa'
>>> bin(c)
'0b1010'

float data type
float literal or value is represented in python using float data type or class.
Float value is a numeric value with fractional part.
This size of float data type is 8bytes.

Finding information about float data type





>>> import sys
>>> sys.float_info
sys.float_info(max=1.7976931348623157e+308, max_exp=1024, max_10_exp=308, min=2.2250738585072014e-308, min_exp=-1021, min_10_exp=-307, dig=15, mant_dig=53, epsilon=2.220446049250313e-16, radix=2, rounds=1)

Example:
>>> a=1.5
>>> a
1.5
>>> type(a)
<class 'float'>
>>> a=1.5
>>> a
1.5
>>> type(a)
<class 'float'>
>>> b=1.123123123123123123123123123123123
>>> b
1.1231231231231231
>>> c=1.123456789123456789123456789
>>> c
1.1234567891234568

Float value is represented in two formats or notations
1.	Fixed notation or fixed format
2.	Scientific notation/exponent notation or scientific format

>>> f1=12.456
>>> f1
12.456
>>> f2=12456e-3
>>> f2
12.456
>>> f3=1.234e2
>>> f3
123.4

In scientific notation one special character used in float value called “e”, the value of “e” is 10.
>>> a=1.7976931348623157e+308
>>> a
1.7976931348623157e+308
>>> b=1.7976931348623157e+309
>>> b
inf
>>> c=0b1010.10
SyntaxError: incomplete input
>>> d=0xab.a
Traceback (most recent call last):
  File "<pyshell#67>", line 1, in <module>
    d=0xab.a
AttributeError: 'int' object has no attribute 'a'

Complex data type

Complex data type or class is used to represent complex number/literal.
Complex number is having two values
1.	Real
2.	Imag

>>> c1=1+2j
>>> c1
(1+2j)
>>> type(c1)
<class 'complex'>
>>> c1.real
1.0
>>> c1.imag
2.0
>>> c2=2j
>>> c2
2j
>>> type(c2)
<class 'complex'>
>>> c2.real
0.0
>>> c2.imag
2.0
>>> c2.real=1.0
Traceback (most recent call last):
  File "<pyshell#78>", line 1, in <module>
    c2.real=1.0
AttributeError: readonly attribute

bool data type
This data type is used to represent Boolean values.
In python Boolean values are represented using two keywords
1.	True
2.	False

Example:
>>> a=True
>>> a
True
>>> type(a)
<class 'bool'>
>>> b=False
>>> b
False
>>> type(b)
<class 'bool'>
>>> c=1
>>> c
1
>>> type(c)
<class 'int'>
>>> d=10>2
>>> d
True



NoneType
NoneType represent None value.
In python None is represented as missing value or no value.

>>> rollno=1
>>> name=None
>>> fee=4000.0
>>> feePaid=True
>>> rollno
1
>>> name
>>> fee
4000.0
>>> feePaid
True
>>> a=None
>>> a
>>> type(a)
<class 'NoneType'>

string



